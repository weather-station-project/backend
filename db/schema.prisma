// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_CONNECTION_STRING")
}

model Store {
  storeNo    String @id(map: "stores_pkey") @map("store_no") @db.VarChar(10)
  marketCode String @map("market_code") @db.VarChar(4)
  name       String @map("name") @db.VarChar(20)

  Device Device[]

  @@map("stores")
}

model Device {
  id                      Int     @id(map: "devices_pkey") @default(autoincrement())
  storeNo                 String  @map("store_no") @db.VarChar(10)
  deviceId                String  @map("device_id") @db.VarChar(20)
  type                    String  @map("type") @db.VarChar(10)
  location                String  @map("location") @db.VarChar(20)
  pixelSizeMillimeters    Float?  @map("pixel_size_millimeters") @db.Real
  minimumSideMarginPixels Float?  @map("minimum_side_margin_pixels") @db.Real
  alignMarginPixels       Float?  @map("align_margin_pixels") @db.Real
  position                String? @map("position") @db.VarChar(15)
  layout                  String? @map("layout") @db.VarChar(15)

  store          Store            @relation(fields: [storeNo], references: [storeNo], map: "devices_storeno_fkey", onDelete: Cascade, onUpdate: Cascade)
  DeviceCategory DeviceCategory[]

  @@unique([storeNo, deviceId], map: "devices_storeno_deviceid_key")
  @@map(name: "devices")
}

model DeviceCategory {
  deviceId       Int    @map("device_id") @db.Integer
  ikeaCategoryId String @map("ikea_category_id") @db.VarChar(10)

  device Device @relation(fields: [deviceId], references: [id], map: "devicecategories_deviceid_fkey", onDelete: Cascade, onUpdate: Cascade)

  @@id([deviceId, ikeaCategoryId], map: "device_categories_pkey")
  @@map(name: "device_categories")
}

model ProductExceptions {
  itemNo            String   @id(map: "product_exceptions_pkey") @map("item_no") @db.VarChar(15)
  verticalRatio     Float?   @map("vertical_ratio") @db.Real
  rgb               Int?     @map("rgb") @db.Integer
  widthPixels       Int?     @map("width_pixels") @db.Integer
  heightPixels      Int?     @map("height_pixels") @db.Integer
  hasDarkColors     Boolean? @map("has_dark_colors") @db.Boolean
  heightCentimeters Float?   @map("height_centimeters") @db.Real
  noRealSize        Boolean? @map("no_real_size") @db.Boolean

  @@map(name: "product_exceptions")
}

model CategoryExceptions {
  categoryId String   @id(map: "category_exceptions_pkey") @map("category_id") @db.VarChar(10)
  noRealSize Boolean? @map("no_real_size") @db.Boolean

  @@map(name: "category_exceptions")
}
